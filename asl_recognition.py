# -*- coding: utf-8 -*-
"""ASL Recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yKPyyOu_i8C07znCxZpOIa67t_Gp4BNy

# Import and Install Dependencies
"""

import cv2
import numpy as np
import os
from matplotlib import pyplot as plt
import time
import mediapipe as mp

"""# Keypoints using MP Holistic"""

# Holistic detetction API (Hands, Face and Pose)

mp_holistic = mp.solutions.holistic

# Drawing Utilities for keypoint and landmark detection

mp_drawings = mp.solutions.drawing_utils

def mediapipe_detection(image, model):

    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    image.flags.writeable = False

    results = model.process(image)

    image.flags.writeable = True

    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    return image, results

def draw_landmarks(image, results):

    # Face Landmarks

    mp_drawings.draw_landmarks(image,

                               results.face_landmarks,

                               mp_holistic.FACEMESH_TESSELATION,

                               mp_drawings.DrawingSpec(color=(6, 70, 99), thickness=1, circle_radius=1),

                               mp_drawings.DrawingSpec(color=(236, 179, 101), thickness=1, circle_radius=1))

    # Pose Landmarks

    mp_drawings.draw_landmarks(image,

                               results.pose_landmarks,

                               mp_holistic.POSE_CONNECTIONS,

                               mp_drawings.DrawingSpec(color=(6, 70, 99), thickness=1, circle_radius=1),

                               mp_drawings.DrawingSpec(color=(236, 179, 101), thickness=1, circle_radius=1))

    # Left Hand Landmarks

    mp_drawings.draw_landmarks(image,

                               results.left_hand_landmarks,

                               mp_holistic.HAND_CONNECTIONS,

                               mp_drawings.DrawingSpec(color=(6, 70, 99), thickness=1, circle_radius=1),

                               mp_drawings.DrawingSpec(color=(236, 179, 101), thickness=1, circle_radius=1))

    # Right Hand

    mp_drawings.draw_landmarks(image,

                               results.right_hand_landmarks,

                               mp_holistic.HAND_CONNECTIONS,

                               mp_drawings.DrawingSpec(color=(6, 70, 99), thickness=1, circle_radius=1),

                               mp_drawings.DrawingSpec(color=(236, 179, 101), thickness=1, circle_radius=1))

cap = cv2.VideoCapture(0)

with mp_holistic.Holistic(min_detection_confidence=0.7, min_tracking_confidence=0.7) as holistic:

    while cap.isOpened():

        ret, frame = cap.read()

        image, results = mediapipe_detection(frame, holistic)

        draw_landmarks(image, results)



        cv2.imshow('OpenCV Feed', image)

        if cv2.waitKey(10) & 0xFF == ord('q'):

            break

cap.release()

cv2.destroyAllWindows()

draw_landmarks(frame, results)

plt.imshow(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))

"""# Extract Keypoint Values"""

len(results.right_hand_landmarks.landmark)

pose = []
for res in results.pose_landmarks.landmark:
    test = np.array([res.x, res.y, res.z, res.visibility])
    pose.append(test)

pose = np.array([[res.x, res.y, res.z, res.visibility] for res in results.pose_landmarks.landmark]).flatten() if results.pose_landmarks else np.zeros(132)
face = np.array([[res.x, res.y, res.z] for res in results.face_landmarks.landmark]).flatten() if results.face_landmarks else np.zeros(1404)
lh = np.array([[res.x, res.y, res.z] for res in results.left_hand_landmarks.landmark]).flatten() if results.left_hand_landmarks else np.zeros(21*3)
rh = np.array([[res.x, res.y, res.z] for res in results.right_hand_landmarks.landmark]).flatten() if results.right_hand_landmarks else np.zeros(21*3)

face = np.array([[res.x, res.y, res.z] for res in results.face_landmarks.landmark]).flatten() if results.face_landmarks else np.zeros(1404)

def extract_keypoints(results):
    pose = np.array([[res.x, res.y, res.z, res.visibility] for res in results.pose_landmarks.landmark]).flatten() if results.pose_landmarks else np.zeros(33*4)
    face = np.array([[res.x, res.y, res.z] for res in results.face_landmarks.landmark]).flatten() if results.face_landmarks else np.zeros(468*3)
    lh = np.array([[res.x, res.y, res.z] for res in results.left_hand_landmarks.landmark]).flatten() if results.left_hand_landmarks else np.zeros(21*3)
    rh = np.array([[res.x, res.y, res.z] for res in results.right_hand_landmarks.landmark]).flatten() if results.right_hand_landmarks else np.zeros(21*3)
    return np.concatenate([pose, face, lh, rh])

result_test = extract_keypoints(results)

result_test

np.save('0', result_test)

np.load('0.npy')

"""# Setup Folders for Collection"""

# Path for exported data, numpy arrays
DATA_PATH = os.path.dirname('D:/PROJECTS/ASL Recognition Using Deep Learning/DataSet/')

# Actions that we try to detect
actions = np.array(['Hello', 'Thank You', 'I Love You','Are You','Good','Sorry','Goodbye','How','No','I am'])

# Thirty videos worth of data
no_sequences = 30

# Videos are going to be 30 frames in length
sequence_length = 30

# Folder start
start_folder = 30

for action in actions:
    for sequence in range(no_sequences):
        try:
            os.makedirs(os.path.join(DATA_PATH, action, str(sequence)))
        except:
            pass

"""# Collect Keypoint Values for Training and Testing"""

# cap = cv2.VideoCapture(0)

# with mp_holistic.Holistic(min_detection_confidence=0.7, min_tracking_confidence=0.7) as holistic:

#     for action in actions:

#         for sequence in range(no_sequences):

#             for frame_num in range(sequence_length):

#                 ret, frame = cap.read()

#                 image, results = mediapipe_detection(frame, holistic)

#                 # print(results)

#                 draw_landmarks(image, results)

#                 if frame_num == 0:

#                     cv2.putText(image, 'STARTING COLLECTION', (120,200),

#                                cv2.FONT_HERSHEY_SIMPLEX, 1, (0,255, 0), 4, cv2.LINE_AA)

#                     cv2.putText(image, 'Collecting frames for {} Video Number {}'.format(action, sequence), (15,12),

#                                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1, cv2.LINE_AA)

#                     cv2.imshow('OpenCV Feed', image)

#                     cv2.waitKey(1000)

#                 else:

#                     cv2.putText(image, 'Collecting frames for {} Video Number {}'.format(action, sequence), (15,12),

#                                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1, cv2.LINE_AA)

#                     cv2.imshow('OpenCV Feed', image)



#                 keypoints = extract_keypoints(results)

#                 npy_path = os.path.join(DATA_PATH, action, str(sequence), str(frame_num))

#                 np.save(npy_path, keypoints)

#                 if cv2.waitKey(10) & 0xFF == ord('q'):

#                     break

#     cap.release()
#     cv2.destroyAllWindows()

"""# Preprocess Data and Create Labels and Features"""

from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical

label_map = {label:num for num, label in enumerate(actions)}

label_map

sequences, labels = [], []
for action in actions:
    for sequence in np.array(os.listdir(os.path.join(DATA_PATH, action))).astype(int):
        window = []
        for frame_num in range(sequence_length):
            res = np.load(os.path.join(DATA_PATH, action, str(sequence), "{}.npy".format(frame_num)))
            window.append(res)
        sequences.append(window)
        labels.append(label_map[action])

np.array(sequences).shape

np.array(labels).shape

X = np.array(sequences)

X.shape

y = to_categorical(labels).astype(int)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.05)

y_test.shape

"""# Build and Train LSTM Neural Network"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.callbacks import TensorBoard

log_dir = os.path.join('Logs')
tb_callback = TensorBoard(log_dir=log_dir)

model = Sequential()
model.add(LSTM(64, return_sequences=True, activation='sigmoid', input_shape=(30,1662)))
model.add(LSTM(128, return_sequences=True, activation='sigmoid'))
model.add(LSTM(64, return_sequences=False, activation='sigmoid'))
model.add(Dense(64, activation='sigmoid'))
model.add(Dense(32, activation='sigmoid'))
model.add(Dense(actions.shape[0], activation='softmax'))

model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['categorical_accuracy'])

model.fit(X_train, y_train, epochs=750, callbacks=[tb_callback])

model.summary()

"""#  Make Predictions"""

res = model.predict(X_test)

actions[np.argmax(res[4])]

actions[np.argmax(y_test[4])]

"""# Save Weights"""

# model.save('action.h5')

# model.load_weights('action.h5')

"""# Evaluation using Confusion Matrix and Accuracy"""

import tensorflow as tf
model = tf.keras.models.load_model('action.h5')

from sklearn.metrics import multilabel_confusion_matrix, accuracy_score

yhat = model.predict(X_test)

ytrue = np.argmax(y_test, axis=1).tolist()
yhat = np.argmax(yhat, axis=1).tolist()

multilabel_confusion_matrix(ytrue, yhat)

accuracy_score(ytrue, yhat)

"""# Test in Real Time"""

import cv2
import numpy as np
import os
from matplotlib import pyplot as plt
import time
import mediapipe as mp

# Holistic detetction API (Hands, Face and Pose)
mp_holistic = mp.solutions.holistic

# Drawing Utilities for keypoint and landmark detection
mp_drawings = mp.solutions.drawing_utils

def mediapipe_detection(image, model):

    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    image.flags.writeable = False

    results = model.process(image)

    image.flags.writeable = True

    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    return image, results

def draw_landmarks(image, results):

    # Face Landmarks

    mp_drawings.draw_landmarks(image,

                               results.face_landmarks,

                               mp_holistic.FACEMESH_TESSELATION,

                               mp_drawings.DrawingSpec(color=(6, 70, 99), thickness=1, circle_radius=1),

                               mp_drawings.DrawingSpec(color=(236, 179, 101), thickness=1, circle_radius=1))

    # Pose Landmarks

    mp_drawings.draw_landmarks(image,

                               results.pose_landmarks,

                               mp_holistic.POSE_CONNECTIONS,

                               mp_drawings.DrawingSpec(color=(6, 70, 99), thickness=1, circle_radius=1),

                               mp_drawings.DrawingSpec(color=(236, 179, 101), thickness=1, circle_radius=1))

    # Left Hand Landmarks

    mp_drawings.draw_landmarks(image,

                               results.left_hand_landmarks,

                               mp_holistic.HAND_CONNECTIONS,

                               mp_drawings.DrawingSpec(color=(6, 70, 99), thickness=1, circle_radius=1),

                               mp_drawings.DrawingSpec(color=(236, 179, 101), thickness=1, circle_radius=1))

    # Right Hand

    mp_drawings.draw_landmarks(image,

                               results.right_hand_landmarks,

                               mp_holistic.HAND_CONNECTIONS,

                               mp_drawings.DrawingSpec(color=(6, 70, 99), thickness=1, circle_radius=1),

                               mp_drawings.DrawingSpec(color=(236, 179, 101), thickness=1, circle_radius=1))

def extract_keypoints(results):
    pose = np.array([[res.x, res.y, res.z, res.visibility] for res in results.pose_landmarks.landmark]).flatten() if results.pose_landmarks else np.zeros(33*4)
    face = np.array([[res.x, res.y, res.z] for res in results.face_landmarks.landmark]).flatten() if results.face_landmarks else np.zeros(468*3)
    lh = np.array([[res.x, res.y, res.z] for res in results.left_hand_landmarks.landmark]).flatten() if results.left_hand_landmarks else np.zeros(21*3)
    rh = np.array([[res.x, res.y, res.z] for res in results.right_hand_landmarks.landmark]).flatten() if results.right_hand_landmarks else np.zeros(21*3)
    return np.concatenate([pose, face, lh, rh])

import tensorflow as tf
model = tf.keras.models.load_model('action.h5')

from scipy import stats

colors = [(245,117,16), (117,245,16), (16,117,245),(245,117,16), (117,245,16), (16,117,245),(245,117,16), (117,245,16), (16,117,245),(245,117,16)]
def prob_viz(res, actions, input_frame, colors):
    output_frame = input_frame.copy()
    for num, prob in enumerate(res):
        cv2.rectangle(output_frame, (0,60+num*40), (int(prob*100), 90+num*40), colors[num], -1)
        cv2.putText(output_frame, actions[num], (0, 85+num*40), cv2.FONT_HERSHEY_SIMPLEX, 0.50, (255,255,255), 2, cv2.LINE_AA)

    return output_frame

# 1. New detection variables
sequence = []
sentence = []
predictions = []
threshold = 0.5

cap = cv2.VideoCapture(0)
# Set mediapipe model
with mp_holistic.Holistic(min_detection_confidence=0.5, min_tracking_confidence=0.5) as holistic:
    while cap.isOpened():

        # Read feed
        ret, frame = cap.read()

        # Make detections
        image, results = mediapipe_detection(frame, holistic)
        print(results)

        # Draw landmarks
        draw_landmarks(image, results)

        # 2. Prediction logic
        keypoints = extract_keypoints(results)
        sequence.append(keypoints)
        sequence = sequence[-30:]

        if len(sequence) == 30:
            res = model.predict(np.expand_dims(sequence, axis=0))[0]
            print(actions[np.argmax(res)])
            predictions.append(np.argmax(res))


        #3. Viz logic
            if np.unique(predictions[-10:])[0]==np.argmax(res):
                if res[np.argmax(res)] > threshold:

                    if len(sentence) > 0:
                        if actions[np.argmax(res)] != sentence[-1]:
                            sentence.append(actions[np.argmax(res)])
                    else:
                        sentence.append(actions[np.argmax(res)])

            if len(sentence) > 1:
                sentence = sentence[-1:]

            # Viz probabilities
            image = prob_viz(res, actions, image, colors)

        cv2.rectangle(image, (0,0), (640, 40), (245, 117, 16), -1)
        cv2.putText(image, ' '.join(sentence), (10,30),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.75, (255, 255, 255), 2, cv2.LINE_AA)

        # Show to screen
        cv2.imshow('OpenCV Feed', image)

        # Break gracefully
        if cv2.waitKey(5) & 0xFF == ord('q'):
            break
    cap.release()
    cv2.destroyAllWindows()

# plt.figure(figsize=(18,18))
# plt.imshow(prob_viz(res, actions, image, colors))

